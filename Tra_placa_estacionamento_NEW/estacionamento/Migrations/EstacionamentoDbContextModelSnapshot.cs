// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace estacionamento.Migrations
{
    [DbContext(typeof(EstacionamentoDbContext))]
    partial class EstacionamentoDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.11");

            modelBuilder.Entity("Cliente", b =>
                {
                    b.Property<string>("Cpf")
                        .HasColumnType("TEXT").HasMaxLength(11).IsRequired();

                    b.Property<string>("Email")
                        .HasColumnType("TEXT").IsRequired().HasMaxLength(30);

                    b.Property<int?>("Id")
                        .HasColumnType("INTEGER").IsRequired();

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT").HasMaxLength(35).IsRequired();

                    b.HasKey("Cpf");

                    b.ToTable("cliente");
                });

            modelBuilder.Entity("Marca", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER").IsRequired();

                    b.Property<string>("DescricaoMarca")
                        .HasColumnType("TEXT").HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Marca");
                });

            modelBuilder.Entity("Modelo", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER").IsRequired();

                    b.Property<string>("DescricaoModelo")
                        .HasColumnType("TEXT").HasMaxLength(30);

                    b.Property<int?>("MarcaId")
                        .HasColumnType("INTEGER").IsRequired();

                    b.Property<int>("Porte")
                        .HasColumnType("INTEGER").HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("MarcaId");

                    b.ToTable("Modelo");
                });

            modelBuilder.Entity("NotaFiscal", b =>
                {
                    b.Property<string>("NumeroNota")
                        .HasColumnType("TEXT").HasMaxLength(10).IsRequired();

                    b.Property<string>("ClienteCpf")
                        .HasColumnType("TEXT").HasMaxLength(11).IsRequired();

                    b.Property<int?>("ServicoId")
                        .HasColumnType("INTEGER").IsRequired();

                    b.Property<double>("ValorDaNota")
                        .HasColumnType("REAL").IsRequired();

                    b.HasKey("NumeroNota");

                    b.HasIndex("ClienteCpf");

                    b.HasIndex("ServicoId");

                    b.ToTable("notasFiscais");
                });

            modelBuilder.Entity("Periodo", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER").IsRequired();

                    b.Property<DateTime?>("HoraEntrada")
                        .HasColumnType("TEXT").HasMaxLength(30).IsRequired();

                    b.Property<DateTime?>("HoraSaida")
                        .HasColumnType("TEXT").HasMaxLength(30);

                    b.Property<int?>("ServicoId")
                        .HasColumnType("INTEGER").IsRequired();

                    b.Property<int?>("TicketId")
                        .HasColumnType("INTEGER").IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ServicoId");

                    b.HasIndex("TicketId");

                    b.ToTable("periodo");
                });

            modelBuilder.Entity("Servico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER").IsRequired();

                    b.Property<string>("DescricaoServico")
                        .HasColumnType("TEXT").HasMaxLength(20).IsRequired();

                    b.Property<double>("ValorHora")
                        .HasColumnType("REAL").IsRequired();

                    b.Property<double?>("ValorPagar")
                        .HasColumnType("REAL");

                    b.Property<string>("_ClienteCpf")
                        .IsRequired()
                        .HasColumnType("TEXT").HasMaxLength(11).IsRequired();

                    b.Property<int>("_PeriodoId")
                        .HasColumnType("INTEGER").IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("_ClienteCpf");

                    b.HasIndex("_PeriodoId");

                    b.ToTable("servico");
                });

            modelBuilder.Entity("Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER").IsRequired();

                    b.Property<int>("CodTicket")
                        .HasColumnType("INTEGER").IsRequired();

                    b.Property<int>("ServicoId")
                        .HasColumnType("INTEGER").IsRequired();

                    b.Property<int?>("TicketId")
                        .HasColumnType("INTEGER").IsRequired();

                    b.Property<string>("VeiculoPlaca")
                        .IsRequired()
                        .HasColumnType("TEXT").HasMaxLength(7).IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ServicoId");

                    b.HasIndex("TicketId");

                    b.HasIndex("VeiculoPlaca");

                    b.ToTable("ticket");
                });

            modelBuilder.Entity("Veiculo", b =>
                {
                    b.Property<string>("Placa")
                        .HasColumnType("TEXT").HasMaxLength(7).IsRequired();

                    b.Property<string>("ClienteCpf")
                        .HasColumnType("TEXT").HasMaxLength(11).IsRequired();

                    b.Property<int>("CorExterna")
                        .HasColumnType("INTEGER").IsRequired();

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT").HasMaxLength(20);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT").HasMaxLength(20);

                    b.Property<int?>("Id")
                        .HasColumnType("INTEGER").IsRequired();

                    b.Property<int?>("ModeloId")
                        .HasColumnType("INTEGER").IsRequired();

                    b.Property<int?>("TicketId")
                        .HasColumnType("INTEGER").IsRequired();

                    b.HasKey("Placa");

                    b.HasIndex("ClienteCpf");

                    b.HasIndex("ModeloId");

                    b.HasIndex("TicketId");

                    b.ToTable("veiculo");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Veiculo");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Caminhonete", b =>
                {
                    b.HasBaseType("Veiculo");

                    b.Property<string>("Combustivel")
                        .HasColumnType("TEXT").HasMaxLength(10);

                    b.Property<int?>("NroPortas")
                        .HasColumnType("INTEGER").HasMaxLength(7);

                    b.ToTable("veiculo", t =>
                        {
                            t.Property("NroPortas")
                                .HasColumnName("Caminhonete_NroPortas");
                        });

                    b.HasDiscriminator().HasValue("Caminhonete");
                });

            modelBuilder.Entity("Carro", b =>
                {
                    b.HasBaseType("Veiculo");

                    b.Property<int?>("NroPortas")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("Carro");
                });

            modelBuilder.Entity("Moto", b =>
                {
                    b.HasBaseType("Veiculo");

                    b.Property<bool?>("Bau")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("Moto");
                });

            modelBuilder.Entity("Modelo", b =>
                {
                    b.HasOne("Marca", "Marca")
                        .WithMany()
                        .HasForeignKey("MarcaId");

                    b.Navigation("Marca");
                });

            modelBuilder.Entity("NotaFiscal", b =>
                {
                    b.HasOne("Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteCpf");

                    b.HasOne("Servico", "Servico")
                        .WithMany()
                        .HasForeignKey("ServicoId");

                    b.Navigation("Cliente");

                    b.Navigation("Servico");
                });

            modelBuilder.Entity("Periodo", b =>
                {
                    b.HasOne("Servico", null)
                        .WithMany("Periodos")
                        .HasForeignKey("ServicoId");

                    b.HasOne("Ticket", null)
                        .WithMany("Periodos")
                        .HasForeignKey("TicketId");
                });

            modelBuilder.Entity("Servico", b =>
                {
                    b.HasOne("Cliente", "_Cliente")
                        .WithMany()
                        .HasForeignKey("_ClienteCpf")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Periodo", "_Periodo")
                        .WithMany()
                        .HasForeignKey("_PeriodoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_Cliente");

                    b.Navigation("_Periodo");
                });

            modelBuilder.Entity("Ticket", b =>
                {
                    b.HasOne("Servico", "Servico")
                        .WithMany()
                        .HasForeignKey("ServicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticket", null)
                        .WithMany("Tickets")
                        .HasForeignKey("TicketId");

                    b.HasOne("Veiculo", "Veiculo")
                        .WithMany()
                        .HasForeignKey("VeiculoPlaca")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Servico");

                    b.Navigation("Veiculo");
                });

            modelBuilder.Entity("Veiculo", b =>
                {
                    b.HasOne("Cliente", null)
                        .WithMany("Veiculos")
                        .HasForeignKey("ClienteCpf");

                    b.HasOne("Modelo", "Modelo")
                        .WithMany()
                        .HasForeignKey("ModeloId");

                    b.HasOne("Ticket", null)
                        .WithMany("Veiculos")
                        .HasForeignKey("TicketId");

                    b.Navigation("Modelo");
                });

            modelBuilder.Entity("Cliente", b =>
                {
                    b.Navigation("Veiculos");
                });

            modelBuilder.Entity("Servico", b =>
                {
                    b.Navigation("Periodos");
                });

            modelBuilder.Entity("Ticket", b =>
                {
                    b.Navigation("Periodos");

                    b.Navigation("Tickets");

                    b.Navigation("Veiculos");
                });
#pragma warning restore 612, 618
        }
    }
}
